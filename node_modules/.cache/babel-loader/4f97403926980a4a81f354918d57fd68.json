{"ast":null,"code":"'use strict';\n\nrequire('./es6.regexp.exec');\n\nvar redefine = require('./_redefine');\n\nvar hide = require('./_hide');\n\nvar fails = require('./_fails');\n\nvar defined = require('./_defined');\n\nvar wks = require('./_wks');\n\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n\n  re.exec = function () {\n    var result = [];\n    result.groups = {\n      a: '7'\n    };\n    return result;\n  };\n\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n\n  re.exec = function () {\n    return originalExec.apply(this, arguments);\n  };\n\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n}();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n\n    O[SYMBOL] = function () {\n      return 7;\n    };\n\n    return ''[KEY](O) != 7;\n  });\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    re.exec = function () {\n      execCalled = true;\n      return null;\n    };\n\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n\n      re.constructor[SPECIES] = function () {\n        return re;\n      };\n    }\n\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return {\n            done: true,\n            value: nativeRegExpMethod.call(regexp, str, arg2)\n          };\n        }\n\n        return {\n          done: true,\n          value: nativeMethod.call(str, regexp, arg2)\n        };\n      }\n\n      return {\n        done: false\n      };\n    });\n    var strfn = fns[0];\n    var rxfn = fns[1];\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n    // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n    ? function (string, arg) {\n      return rxfn.call(string, this, arg);\n    } // 21.2.5.6 RegExp.prototype[@@match](string)\n    // 21.2.5.9 RegExp.prototype[@@search](string)\n    : function (string) {\n      return rxfn.call(string, this);\n    });\n  }\n};","map":{"version":3,"names":["require","redefine","hide","fails","defined","wks","regexpExec","SPECIES","REPLACE_SUPPORTS_NAMED_GROUPS","re","exec","result","groups","a","replace","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","apply","arguments","split","length","module","exports","KEY","SYMBOL","DELEGATES_TO_SYMBOL","O","DELEGATES_TO_EXEC","execCalled","constructor","undefined","nativeRegExpMethod","fns","maybeCallNative","nativeMethod","regexp","str","arg2","forceStringMethod","done","value","call","strfn","rxfn","String","prototype","RegExp","string","arg"],"sources":["/home/arthur/yfac-2/node_modules/babel-polyfill/node_modules/core-js/modules/_fix-re-wks.js"],"sourcesContent":["'use strict';\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}